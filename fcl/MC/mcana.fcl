#include "services_microboone.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "cluster_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "vertexfindermodules.fcl"
#include "pandoramodules_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "trackfindermodules_microboone.fcl"
#include "cosmicremovalmodules.fcl"
#include "mchitmodules.fcl"
#include "mcreco.fcl"

# Include the following lines to have the default microboone_disp definition
# also include stuff we need to run recon
BEGIN_PROLOG
##microboone_services.BackTracker: @local::microboone_backtracker  
END_PROLOG

process_name: Reco2DTest

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco2D_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  #MemoryPeakReporter:    {}
  message:      @local::microboone_message_services_prod_debug
##  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_services
}
##services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"

services.user.PhotonVisibilityService: @local::microboone_photonvisibilityservice

##services.user.DatabaseUtil.ShouldConnect: false

##services.user.FileCatalogMetadataExtras:  @local::microboone_file_catalog
##services.user.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
##                                                    "fileFormat", "root",
##                                                    "fclName",    "standard_reco_uboone_2D.fcl",
##                                                    "fclVersion", "v1_5",
##                                                    "ubProjectStage",   "reco2D",
##                                                    "ubProjectVersion", "v1_3" ]
##services.user.FileCatalogMetadataExtras.RenameTemplate: "${base .root}_${CLUSTER 0}_${PROCESS 0}_reco2D.root"

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  800        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
 }

 analyzers:
 {
   pfpartana: {
                module_type:          "PFParticleMcAna"
                SimulationLabel:      "largeant"
                McHitFinderLabel:     "mchitfinder"
                PFParticleLabel:      "cluster3d"
                HitLabel:             "gaushit"
                ClusterProducerLabel: "cluster3d"
                TrackProducerLabel:   "trackkalmanhitc3d"
                CosmicProducerLabel:  "cluster3dpcatag"
                FlashProducerLabel:   "flashTrackMatchkHit"
                #PFParticleLabel:      "pandoraCosmic"
                #HitLabel:             "gaushit"
                #ClusterProducerLabel: "pandoraCosmic"
                #TrackProducerLabel:   "pandoraCosmicKHit"
                #CosmicProducerLabel:  "pandoraCosmicKHittag"
                #FlashProducerLabel:   "pandoraCosmicKHitFlashMatch"
                #PFParticleLabel:      "cctrack"
                #HitLabel:             "cccluster"
                #ClusterProducerLabel: "cccluster"
                #TrackProducerLabel:   "trackkalmanhitccc"
                #CosmicProducerLabel:  "trackkalmanhittagcc"
                #FlashProducerLabel:   "trackkalmanhitflashmatchcc"
                PDGcode:              13
              }
   digitana: { module_type:         LArRawDigitAna 
               DigitModuleLabel:    "daq"
	       UseChannelPedestals: true
	       WritePedestals:      false
	     }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [  ]

 #define the analysis modules
 analysis: [ pfpartana ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ analysis ]  
}

### Here, we overwrite ALL module labels with the ones defined above.


services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "DEBUG"     #tells the message service that this destination applies to INFO and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       Cluster3D:
       {
         limit: -1
         reportEvery: 1
       }
       default:
       {
         limit: 0  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}
