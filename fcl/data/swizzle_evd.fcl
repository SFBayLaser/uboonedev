#include "evdservices_microboone.fcl"
#include "database_microboone.fcl"

#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "triggeralgo_service.fcl"

# Include the following lines to have the default microboone_disp definition
# also include stuff we need to run recon
BEGIN_PROLOG
microboone_disp.LArFFT:                                    @local::microboone_larfft
microboone_disp.SignalShapingServiceMicroBooNE:            @local::microboone_signalshapingservice
microboone_disp.MemoryPeakReporter:                        {}
microboone_disp.BackTracker:                               @local::microboone_backtracker
#microboone_disp.SpaceCharge:                              @local::microboone_spacecharge
microboone_disp.SeedService:                               @local::microboone_seedservice
microboone_disp.RawDrawingOptions.DetPedestalRetrievalAlg: @local::microboone_pedestalretrievalalg
END_PROLOG

process_name: Reco2DTestEVD

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco2D_hist_evd.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  #MemoryPeakReporter:    {}
  message:      @local::microboone_message_services_prod_debug
##  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_disp
}
##services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"

services.user.PhotonVisibilityService: @local::microboone_photonvisibilityservice

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

  ### random number saver
  rns:                 { module_type: RandomNumberSaver }

  ### calwire producers
  caldata:                @local::microboone_calroi

  ### hit-finder producers
  gaushit:                @local::microboone_gaushitfinder
 }

 analyzers:
 {
   digitana: { module_type:         LArRawDigitAna 
               DigitModuleLabel:    "daq"
	       UseChannelPedestals: true
	       WritePedestals:      false
	     }
   evdisp:   {module_type: EVD}
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns,
         caldata #,
         #gaushit
	 ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #define the analysis modules
 #analysis: [ pfparticlemcana, pandoraana, trackana ]
 analysis: [ digitana ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 evd: [ evdisp ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 ##end_paths:     [ analysis, evd, stream1 ]  
 end_paths:     [ analysis, evd ]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_reco_uboone_2D.root"
##   dataTier:    "reconstructed-2d"
   compressionLevel: 1
 }
}


### Here, we overwrite ALL module labels with the ones defined above.

physics.producers.caldata.Threshold:                            [ 1, 1, 1]
physics.producers.caldata.DetPedestalRetrievalAlg.DatabaseRetrievalAlg.DBFolderName: "detpedestals_data"
physics.producers.caldata.DetPedestalRetrievalAlg.DatabaseRetrievalAlg.DBUrl:        "http://dbdata0vm.fnal.gov:8086/uboonecon_dev/app/"
physics.producers.caldata.DetPedestalRetrievalAlg.UseDB:                             true
physics.producers.caldata.DetPedestalRetrievalAlg.UseDefault:                        false

physics.producers.gaushit.CalDataModuleLabel:                   "daq"
physics.producers.gaushit.MinSig:                               [2.5,    2.5,   2.5]
physics.producers.gaushit.InitWidth:                            [6.0,    6.0,   7.8]
physics.producers.gaushit.MinWidth:                             [4.0,    4.0,   6.0]
physics.producers.gaushit.AreaNorms:                            [13.25, 13.25, 26.31]

services.user.Geometry.Name:                                    "microboonev6"
services.user.Geometry.GDML:                                    "microboonev6.gdml"
services.user.Geometry.ROOT:                                    "microboonev6.gdml"

services.user.RawDrawingOptions.DetPedestalRetrievalAlg:        @local::microboone_pedestalretrievalalg
services.user.RawDrawingOptions.DrawRawDataOrCalibWires:        2
services.user.RawDrawingOptions.TotalTicks:                     9600
services.user.RawDrawingOptions.MinimumSignal:                  50
services.user.RawDrawingOptions.DetPedestalRetrievalAlg.DatabaseRetrievalAlg.DBFolderName: "detpedestals_data"
services.user.RawDrawingOptions.DetPedestalRetrievalAlg.DatabaseRetrievalAlg.DBUrl:        "http://dbdata0vm.fnal.gov:8086/uboonecon_dev/app/"
services.user.RawDrawingOptions.DetPedestalRetrievalAlg.UseDB:                             true
services.user.RawDrawingOptions.DetPedestalRetrievalAlg.UseDefault:                        false
services.user.RawDrawingOptions.MaxChannelStatus:               3

services.user.EvdLayoutOptions.AutoZoomInterest:                0
services.user.RecoDrawingOptions.HitModuleLabels:               ["gaushit"] 
services.user.RecoDrawingOptions.WireModuleLabels:              ["caldata"] 

services.user.SignalShapingServiceMicroBooNE.ShapeTimeConst:    [ -1000.0, -1000.0, -1000.0 ]
services.user.SignalShapingServiceMicroBooNE.ASICGainInMVPerFC: [ 14.0, 14.0, 14.0 ]

